package com.library.application.controller;

//import java.time.Year;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.library.application.domain.Author;
import com.library.application.domain.WRelationship;
import com.library.application.domain.WRelationshipType;
import com.library.application.domain.Work;
import com.library.application.persistence.AuthorRepository;
import com.library.application.persistence.WRelationshipRepository;
import com.library.application.persistence.WorkRepository;


@Controller	// This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/author") // This means URL's start with /demo (after Application path)
public class AuthorController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private AuthorRepository authorRepository;
	
	
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewAuthor (@RequestParam String name,@RequestParam String surname,@RequestParam Integer yearBirth,@RequestParam Integer yearDeath) {
		
		//public Author(String name, String surname, Year yearBirth, Year yearDeath) 
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Author a = new Author();
		a.setName(name);
		a.setSurname(surname);
		a.setYearBirth(yearBirth);
		a.setYearDeath(yearDeath);
		
		authorRepository.save(a);
		return "Saved";
	}
	


	@GetMapping(path="/all")
	public @ResponseBody Iterable<Author> getAllAuthors() {
		// This returns a JSON or XML with the users
		return authorRepository.findAll();
	}
	
	@GetMapping(path="/{authorQuery}")
	public @ResponseBody Iterable<Author> getAuthorsFromQuery (@PathVariable (value = "authorQuery") String authorQuery) {
		Iterable<Author> allAuthors = authorRepository.findAll();
		//Set<Author> authorsResultQuery = new HashSet<Author>();
		ArrayList<Author> authorsResultQuery = new ArrayList<>();
		for (Author a : allAuthors) {
			if (a.getSurname() != null) {
			if (a.getSurname().contains(authorQuery) || a.getSurname().toLowerCase().contains(authorQuery) || a.getSurname().toUpperCase().contains(authorQuery)) {
				authorsResultQuery.add(a);	
			}
			} else {
				if (a.getName().contains(authorQuery) || a.getName().toLowerCase().contains(authorQuery) || a.getName().toUpperCase().contains(authorQuery)) {
					authorsResultQuery.add(a);	
				}
			}
		}
		
		
//		authorsResultQuery.sort(new AuthorSorter());
//		System.out.println(authorsResultQuery.toString());
//		Collections.sort(authorsResultQuery, new Comparator<Author>(){
//		    public int compare(Author a1, Author a2) {
//		        return a2.getSurname().compareToIgnoreCase(a1.getSurname());
//		    }
//		});
//		System.out.println(authorsResultQuery.toString());
		return authorsResultQuery;
		
	}
	

	
}