package com.library.application.controller;

//import java.time.Year;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.library.application.domain.Author;
import com.library.application.domain.Collection;
import com.library.application.domain.WRelationship;
import com.library.application.domain.WRelationshipType;
import com.library.application.domain.Work;
import com.library.application.persistence.AuthorRepository;
import com.library.application.persistence.CollectionRepository;
import com.library.application.persistence.WRelationshipRepository;
import com.library.application.persistence.WorkRepository;


@Controller	// This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/collection") // This means URL's start with /demo (after Application path)
public class CollectionController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private CollectionRepository collectionRepository;
	
	
	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewCollection (@RequestParam String name,@RequestParam String publisher) {
		
		//(String name, String publisher) 
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Collection c = new Collection();
		c.setName(name);
		c.setPublisher(publisher);

		
		collectionRepository.save(c);
		return "Saved";
	}
	


	@GetMapping(path="/all")
	public @ResponseBody Iterable<Collection> getAllCollections() {
		// This returns a JSON or XML with the users
		return collectionRepository.findAll();
	}
	

	

	
}