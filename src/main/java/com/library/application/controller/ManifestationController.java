package com.library.application.controller;

//import java.time.Year;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.hibernate.validator.constraints.ISBN;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.library.application.domain.Author;
import com.library.application.domain.Collaborator;
import com.library.application.domain.Collection;
import com.library.application.domain.Expression;
import com.library.application.domain.Language;
import com.library.application.domain.Manifestation;
import com.library.application.domain.Subject;
import com.library.application.domain.Support;
import com.library.application.domain.WRelationship;
import com.library.application.domain.WRelationshipType;
import com.library.application.domain.Work;
import com.library.application.persistence.AuthorRepository;
import com.library.application.persistence.CollaboratorRepository;
import com.library.application.persistence.CollectionRepository;
import com.library.application.persistence.ExpressionRepository;
import com.library.application.persistence.ManifestationRepository;
import com.library.application.persistence.SubjectRepository;
import com.library.application.persistence.WRelationshipRepository;
import com.library.application.persistence.WorkRepository;


@Controller	// This means that this class is a Controller
@CrossOrigin
@RequestMapping(path="/manifestation") // This means URL's start with /demo (after Application path)
public class ManifestationController {
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private ManifestationRepository manifestationRepository;

	@Autowired // This means to get the bean called userRepository
	   // Which is auto-generated by Spring, we will use it to handle the data
private ExpressionRepository expressionRepository;
	
	@Autowired // This means to get the bean called userRepository
	   // Which is auto-generated by Spring, we will use it to handle the data
private CollectionRepository collectionRepository;
	
	@Autowired // This means to get the bean called userRepository
	   // Which is auto-generated by Spring, we will use it to handle the data
private CollaboratorRepository collaboratorRepository;
	@Autowired
	private WorkRepository workRepository;

	
	@PostMapping(path="/add") // Map ONLY POST Requests
	//public @ResponseBody String addNewManifestation (@RequestParam Set<Integer> idsExpressions, @RequestParam String isbn, @RequestParam String dL, @RequestParam String titleProper) {
	public @ResponseBody String addNewManifestation (@RequestParam Set<Integer> idsExpressions, @RequestParam String isbn, @RequestParam String dL, @RequestParam String titleProper, @RequestParam String placePublication, @RequestParam String publisher, @RequestParam Integer yearPublication, @RequestParam Support support, @RequestParam Integer collectionId, @RequestParam Integer collectionNumber) {
	//public @ResponseBody String addNewManifestation (@RequestBody Manifestation m) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		/*
		 * Set<Expression> expressions, ISBN isbn, String dL, String titleProper, String placePublication,
			String publisher, Year yearPublication, Support support, Collection collection, Integer collectionNumber)
	}
		 * 
		 */
		
		
		/*
		 * idsExpressions = idsExpressions.replace(",", "");
		 * 
		 * String[] idsExpressionsArray = new String[idsExpressions.length()];
		 * 
		 * 
		 * Integer[] in = new Integer[idsExpressions.length()];
		 * 
		 * 
		 * for (int i = 0; i < idsExpressions.length(); i++) { in[i] =
		 * Character.getNumericValue(idsExpressions.charAt(i)); }
		 */
		
        
        
        
		
		
		
		

		Manifestation m = new Manifestation();


		Iterable<Expression> allExpressions = expressionRepository.findAll();

		Set<Expression> relatedExpressions = new HashSet<Expression>(); 
		for (Expression x : allExpressions) { 
			for (int i : idsExpressions) { 
				if (x.getId() == i) {
					relatedExpressions.add(x); 
				}
			}
		}
			

			m.setExpressions(relatedExpressions); 
			m.setIsbn(isbn); 
			m.setDL(dL);
			m.setTitleProper(titleProper); 
			m.setPlacePublication(placePublication);
			m.setPublisher(publisher); 
			m.setYearPublication(yearPublication);
			m.setSupport(support);


			Iterable<Collection> allCollections = collectionRepository.findAll();

			Collection manifestationCollection = new Collection(); for (Collection x :
				allCollections) {

				if (x.getId() == collectionId) { manifestationCollection = x; }

			}

			m.setCollection(manifestationCollection);

			m.setCollectionNumber(collectionNumber);
		  
		 

		
		manifestationRepository.save(m);
		return "Saved";
	}
	
	@PostMapping(path="/add2") // Map ONLY POST Requests
	public @ResponseBody String addNewManifestationOneExpression (@RequestParam Integer idExpression, @RequestParam String isbn, @RequestParam String dL, @RequestParam String titleProper, @RequestParam String placePublication, @RequestParam String publisher, @RequestParam Integer yearPublication, @RequestParam Support support, @RequestParam Integer collectionId, @RequestParam Integer collectionNumber) {
		//public @ResponseBody String addNewManifestation (@RequestBody Manifestation m) {
			// @ResponseBody means the returned String is the response, not a view name
			// @RequestParam means it is a parameter from the GET or POST request

			/*
			 * Set<Expression> expressions, ISBN isbn, String dL, String titleProper, String placePublication,
				String publisher, Year yearPublication, Support support, Collection collection, Integer collectionNumber)
		}
			 * 
			 */
			
			
			/*
			 * idsExpressions = idsExpressions.replace(",", "");
			 * 
			 * String[] idsExpressionsArray = new String[idsExpressions.length()];
			 * 
			 * 
			 * Integer[] in = new Integer[idsExpressions.length()];
			 * 
			 * 
			 * for (int i = 0; i < idsExpressions.length(); i++) { in[i] =
			 * Character.getNumericValue(idsExpressions.charAt(i)); }
			 */
			
	        
	        
	        
			
			
			
			

			Manifestation m = new Manifestation();


			Iterable<Expression> allExpressions = expressionRepository.findAll();

			Set<Expression> relatedExpressions = new HashSet<Expression>(); 
			for (Expression x : allExpressions) { 
				//for (int i : idsExpressions) { 
					if (x.getId() == idExpression) {
						relatedExpressions.add(x); 
					}
				//}
			}
				

				m.setExpressions(relatedExpressions); 
				m.setIsbn(isbn); 
				m.setDL(dL);
				m.setTitleProper(titleProper); 
				m.setPlacePublication(placePublication);
				m.setPublisher(publisher); 
				m.setYearPublication(yearPublication);
				m.setSupport(support);


				Iterable<Collection> allCollections = collectionRepository.findAll();

				Collection manifestationCollection = new Collection(); for (Collection x :
					allCollections) {

					if (x.getId() == collectionId) { manifestationCollection = x; }

				}

				m.setCollection(manifestationCollection);

				m.setCollectionNumber(collectionNumber);
			  
			 

			
			manifestationRepository.save(m);
			return "Saved";
		}
	


	@GetMapping(path="/all")
	//public @ResponseBody Iterable<Manifestation> getAllManifestations() {
	public @ResponseBody String getAllManifestations() {
		// This returns a JSON or XML with the users
		return manifestationRepository.findAll().toString();
	}
	
	//Set d'expressions --> manifestacions
	@PostMapping("/expressions")
	public @ResponseBody String getManifestationsFromExpressions(@RequestBody ArrayList<Expression> expressions){   //Iterable<Manifestation>
		
		 Iterable<Manifestation> allManifestations =  manifestationRepository.findAll();
		Set<Manifestation> manifestationsFromExpressions = new HashSet<Manifestation>();
		 
		for (Manifestation m : allManifestations) {
			
			
			for (Expression e : m.getExpressions()) {
				
				for (Expression e2: expressions) {
					
					if (e2.getId() == e.getId()) {
						manifestationsFromExpressions.add(m);
					}
					
				}
				
				
			}
			
		}
Integer counter = 0;		 
for (Manifestation m2 : manifestationsFromExpressions) {
	counter++;
	System.out.println("Iteraci√≥ " + counter);
	System.out.println("-------------------");
	System.out.println(m2.toString());
	System.out.println("-------------------");
	
}
		
		return manifestationsFromExpressions.toString();
	}
	
	//manifestacions per id d'expressio 
	@GetMapping(path="/{expressionId}")
	public @ResponseBody String getAllManifestationsFromExpression(@PathVariable (value = "expressionId") Integer expressionId) {
		Iterable<Manifestation> allManifestations = manifestationRepository.findAll();
		Set<Manifestation> manifestationsFromExpression = new HashSet<Manifestation>();
		
		 for (Manifestation x : allManifestations) {
			 for (Expression e : x.getExpressions()) 
			 {
			 if (e.getId() == expressionId) {
				 manifestationsFromExpression.add(x);
			 }
			 }
		 }
		return manifestationsFromExpression.toString();
		
	}
	
	
	//Numero de manifestacions per id d'expressio 
		@GetMapping(path="/number/{expressionId}")
		public @ResponseBody int getNumberManifestationsFromExpression(@PathVariable (value = "expressionId") Integer expressionId) {
			Iterable<Manifestation> allManifestations = manifestationRepository.findAll();
			Set<Manifestation> manifestationsFromExpression = new HashSet<Manifestation>();
			
			 for (Manifestation x : allManifestations) {
				 for (Expression e : x.getExpressions()) 
				 {
				 if (e.getId() == expressionId) {
					 manifestationsFromExpression.add(x);
				 }
				 }
			 }
			return manifestationsFromExpression.size();
			
		}
	
	
	//Numero manifestacions per id d'autor 
	@GetMapping(path="/{authorId}/numberfromauthor")
	public @ResponseBody Integer getNumberManifestationsFromAuthor(@PathVariable (value = "authorId") Integer authorId) {
		Iterable<Work> allWorks = workRepository.findAll();
		Iterable<Expression> allExpressions = expressionRepository.findAll();
		//Set<Expression> expressionsFromAuthor = new HashSet<Expression>();
		Iterable<Manifestation> allManifestations = manifestationRepository.findAll();
		Set<Manifestation> manifestationsFromAuthor = new HashSet<Manifestation>();
		//obres
		
		Expression chosenExpression;
		
		 for (Work w : allWorks) {
			 //obres de l'autor
			 for (Author a : w.getAuthors()) {
				 if (a.getId() == authorId) {
					 //expressions
					 for (Expression e : allExpressions) {
						 
						 //expressions de l'autor
						 if (e.getWork().getId() == w.getId()) {
							 chosenExpression = e;
							 for (Manifestation m : allManifestations) {
								 
								 for (Expression em :  m.getExpressions()) {
									 
									 if (em.getId() == chosenExpression.getId()) {
										 manifestationsFromAuthor.add(m);
									 }
									 
									 
								 }
								
								 
							 }
							 
							 
							// expressionsFromAuthor.add(e);
						 }
					 }
					 
				 }
				 
			 }
			 
			 
			 
			 
		 }
		return manifestationsFromAuthor.size();
		
	}
	
}